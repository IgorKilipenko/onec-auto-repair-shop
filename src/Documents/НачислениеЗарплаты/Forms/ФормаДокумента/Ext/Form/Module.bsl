#Область ОписаниеПеременных

//  - Структура
//      * ВидыРасчетов - ФиксированнаяСтруктура из КлючИЗначение
//          ** Ключ - Строка - Имя предопределенного значения
//          ** Значение - ПланВидовРасчетаСсылка.Начисления
&НаКлиенте
Перем _ДополнительныеСвойства;

#КонецОбласти // ОписаниеПеременных

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(_)
    инициализация();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(_)
    // Автоматическое Заполнение ТЧ Начисления
    ЭтотОбъект.Объект.Начисления.Очистить();
    началоПериода = НачалоМесяца(ЭтотОбъект.Объект.ПериодНачисления);
    конецПериода = КонецМесяца(ЭтотОбъект.Объект.ПериодНачисления);

    заполнитьТаблицуНачисленийНаСервере(началоПериода, конецПериода);

    // Установка флага модифицированности документа после заполнения ТЧ
    ЭтотОбъект.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодНачисленияПриИзменении(_)
    ЭтотОбъект.Объект.ПериодНачисления = НачалоМесяца(ЭтотОбъект.Объект.ПериодНачисления);
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыНачисления

&НаКлиенте
Процедура НачисленияПриНачалеРедактирования(Знач тчНачисления, Знач новаяСтрока, Знач копирование)
    текущиеДанныеНачисления = тчНачисления.ТекущиеДанные;

    // Обработка создания новой строки начислений
    Если новаяСтрока И копирование = Ложь И ЗначениеЗаполнено(текущиеДанныеНачисления.ВидРасчета) = Ложь Тогда
        // Заполнение поля ВидРасчета значением по умолчанию: Оклад
        текущиеДанныеНачисления.ВидРасчета = _ДополнительныеСвойства.ВидыРасчетов.Оклад;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовТаблицыФормыНачисления

#Область СлужебныеПроцедурыИФункции

// Выполняет заполнение ТЧ Начисления за указанный период
// Параметры:
//  началоПериода - Дата
//  конецПериода - Дата
&НаСервере
Процедура заполнитьТаблицуНачисленийНаСервере(Знач началоПериода, Знач конецПериода)
    // Диагностика аргументов
    ДиагностикаКлиентСервер.Утверждение(ТипЗнч(началоПериода) = Тип("Дата") И ТипЗнч(конецПериода) = Тип("Дата"),
            "Начало и конец периода должны иметь Тип: ""Дата"".");
    ДиагностикаКлиентСервер.Утверждение(конецПериода > началоПериода,
        "Дата окончания периода должна быть старше начала.");

    // Проверка наличия данных в регистре КадроваяИсторияСотрудников
    параметрыЗапроса = Новый Структура("НачалоПериода, КонецПериода",
            началоПериода, конецПериода);
    кадроваяИсторияСотрудников = РегистрыСведений.КадроваяИсторияСотрудников.ПолучитьКадровыеДанныеИнтервал(
            Неопределено, параметрыЗапроса, Истина);

    Если кадроваяИсторияСотрудников = Неопределено Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = "Кадровая история за период начисления отсутствует.";
        сообщение.Сообщить();

        Возврат; // Данные отсутствуют -> выход
    КонецЕсли;

    // Заполнение ТЧ Начисления
    предСтрока = Неопределено;
    Для Каждого данныеСотрудника Из кадроваяИсторияСотрудников Цикл
        строкаНачисления = ЭтотОбъект.Объект.Начисления.Добавить();

        строкаНачисления.ВидРасчета = ПланыВидовРасчета.Начисления.Оклад;
        строкаНачисления.Сотрудник = данныеСотрудника.Сотрудник;
        строкаНачисления.ГрафикРаботы = данныеСотрудника.ГрафикРаботы;
        строкаНачисления.ДатаНачала = Макс(началоПериода, данныеСотрудника.Период);
        строкаНачисления.ДатаОкончания = ?(данныеСотрудника.Работает, конецПериода, данныеСотрудника.Период);
        строкаНачисления.ПоказательРасчета = данныеСотрудника.Оклад;

        // Если кадровая история по сотруднику менялась в течении текущего периода
        Если предСтрока <> Неопределено И предСтрока.Сотрудник = данныеСотрудника.Сотрудник Тогда
            Если данныеСотрудника.Работает Тогда
                предСтрока.ДатаОкончания = получитьПредыдущийДеньНаСервере(строкаНачисления.ДатаНачала);

            Иначе
                // Обработка особого случая увольнения сотрудника, когда кадровая история менялась
                //  в текущем периоде (в том-же периоде когда и увольнение).
                //  пример: если сотрудник устроился и уволился в течении одного месяца
                предСтрока.ДатаОкончания = строкаНачисления.ДатаНачала;
                ЭтотОбъект.Объект.Начисления.Удалить(ЭтотОбъект.Объект.Начисления.Количество() - 1);

                Продолжить;
            КонецЕсли;
        КонецЕсли;

        предСтрока = строкаНачисления;
    КонецЦикла;
КонецПроцедуры

// Устарела. Нужно доработать с учетом графика работы
//  Отнимает одни сутки от переданной в аргументе `даты`
// Параметры:
//  дата - Дата
// Возвращаемое значение:
//  - Дата
&НаСервереБезКонтекста
Функция получитьПредыдущийДеньНаСервере(Знач дата)
    Возврат дата - 24 * 60 * 60;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область Инициализация

&НаКлиенте
Процедура инициализация()
    _ДополнительныеСвойства = Новый Структура("ВидыРасчетов");
    _ДополнительныеСвойства.ВидыРасчетов = получитьПредопределенныеДанныеНаСервере().ВидыРасчетов;
КонецПроцедуры

// Возвращаемое значение:
//  - ФиксированнаяСтруктура
//      * ВидыРасчетов - ФиксированнаяСтруктура из КлючИЗначение
//          ** Ключ - Строка - Имя предопределенного значения
//          ** Значение - ПланВидовРасчетаСсылка.Начисления
&НаСервереБезКонтекста
Функция получитьПредопределенныеДанныеНаСервере()
    результат = Новый Структура;
    результат.Вставить("ВидыРасчетов", РаботаСМетаданными.ПолучитьЗначенияПредопределенных(Тип("ПланВидовРасчетаСсылка.Начисления")));
    ДиагностикаКлиентСервер.Утверждение(
        ПроверкаТиповКлиентСервер.ЭтоСтруктура(результат.ВидыРасчетов, Ложь));

    // Если предопределенное значение Оклад отсутствует, тогда значением по умолчанию будет: Оклад = ПустаяСсылка
    Если результат.ВидыРасчетов.Свойство("Оклад") = Ложь Тогда
        результат.ВидыРасчетов = Новый Структура(результат.ВидыРасчетов);
        результат.ВидыРасчетов.Вставить("Оклад", ПланыВидовРасчета.Начисления.ПустаяСсылка());
        результат.ВидыРасчетов = Новый ФиксированнаяСтруктура(результат.ВидыРасчетов);
    КонецЕсли;

    Возврат Новый ФиксированнаяСтруктура(результат);
КонецФункции

#КонецОбласти // Инициализация
