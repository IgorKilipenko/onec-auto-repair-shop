#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Знач данныеЗаполнения, __, ___)
    Если ЗначениеЗаполнено(ЭтотОбъект.АвторДокумента) = Ложь Тогда
        ЭтотОбъект.АвторДокумента = ПараметрыСеанса.ТекущийПользователь;
    КонецЕсли;

    Если ТипЗнч(данныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
        заполнитьНаОснованииДокументаЗакаНаряд(данныеЗаполнения);
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, __)
    очиститьДвиженияДокумента();

    результатВыполненияДвижений = выполнитьВсеДвиженияДокумента();
    Если результатВыполненияДвижений.Успех = Ложь Тогда
        отказ = Истина;
    Иначе
        записатьДвижения();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции
#Область Движения
Процедура записатьДвижения()
    Движения.ТоварыНаСкладах.Записывать = Истина;
    Движения.Продажи.Записывать = Истина;
    Движения.УчетЗатрат.Записывать = Истина;
    Движения.МатериалыЗаказчиков.Записывать = Истина;

    Движения.Записать();
КонецПроцедуры

Процедура очиститьДвиженияДокумента()
    записатьДвижения();
    Движения.ЗаказыКлиентов.Записывать = Истина;
КонецПроцедуры

Функция выполнитьВсеДвиженияДокумента()
    результатДвижений = Новый Структура("Успех", Истина);

    результатДвижений.Успех = выполнитьВсеДвиженияТоваровДокумента().Успех;
    Если результатДвижений.Успех = Ложь Тогда
        Возврат результатДвижений;
    КонецЕсли;

    выполнитьВсеДвиженияУслугДокумента();
    выполнитьВсеДвиженияМатериаловЗаказчикаДокумента();

    // Учет выполненных услуг (расход в реестре ЗаказыКлиентов)
    Если ТипЗнч(ЭтотОбъект.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаряд")
        И ЭтотОбъект.ДокументОснование.Пустая() = Ложь Тогда
        выполнитьДвижениеЗаказыКлиентовРасход();
    КонецЕсли;

    Возврат результатДвижений;
КонецФункции

Функция выполнитьВсеДвиженияТоваровДокумента()
    результатДвижения = Новый Структура("Успех", Истина);
    Если ЭтотОбъект.Товары.Количество() = 0 Тогда
        Возврат результатДвижения;
    КонецЕсли;

    менеджерТаблиц = Новый МенеджерВременныхТаблиц;

    блокировка = получитьБлокировкуИзмененияТоварыНаСкладах();
    блокировка.Заблокировать();

    деревоТоваров = получитьТоварыДокументаИОстатки(менеджерТаблиц);
    ДиагностикаКлиентСервер.Утверждение(деревоТоваров <> Неопределено);

    // Коллекция для аккумуляции сумм себестоимостей товаров по статьям затрат
    структураСтатейЗатрат = Новый Соответствие;

    Для Каждого строкаТоваров Из деревоТоваров.Строки Цикл
        количествоОстатков = строкаТоваров.КоличествоОстаток - строкаТоваров.КоличествоВДокументе;

        Если количествоОстатков < 0 Тогда
            сообщитьПользователюОПревышенииОстатков(
                -количествоОстатков,
                строкаТоваров.НоменклатураПредставление);

            результатДвижения.Успех = Ложь;
        КонецЕсли;

        Если результатДвижения.Успех Тогда
            стоимостьПартии = выполнитьДвиженияТоваровПоПартиям(строкаТоваров);
            ДиагностикаКлиентСервер.Утверждение(строкаТоваров.СтатьяЗатрат <> Неопределено,
                "Статья затрат должна иметь заполненное значение.");
            текущаяСуммаПоСтатьеЗатрат = структураСтатейЗатрат.Получить(строкаТоваров.СтатьяЗатрат);
            Если текущаяСуммаПоСтатьеЗатрат = Неопределено Тогда
                структураСтатейЗатрат.Вставить(строкаТоваров.СтатьяЗатрат, стоимостьПартии);
            Иначе
                структураСтатейЗатрат[строкаТоваров.СтатьяЗатрат] = текущаяСуммаПоСтатьеЗатрат + стоимостьПартии;
            КонецЕсли;

            выполнитьДвижениеПродажиОборот(строкаТоваров.Номенклатура,
                строкаТоваров.СуммаВДокументе, строкаТоваров.количествоВДокументе);
        КонецЕсли;
    КонецЦикла;

    // Списывание себестоимости реализуемых товаров со сверткой по статям затрат
    Если результатДвижения.Успех И структураСтатейЗатрат.Количество() > 0 Тогда
        Для Каждого элементЗатратКЗ Из структураСтатейЗатрат Цикл
            выполнитьДвижениеУчетЗатратОборот(элементЗатратКЗ.Ключ, элементЗатратКЗ.значение);
        КонецЦикла;
    КонецЕсли;

    Возврат результатДвижения;
КонецФункции

Процедура выполнитьВсеДвиженияУслугДокумента()
    Если ЭтотОбъект.Услуги.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;

    услугиДокумента = получитьУслугиДокумента();
    ДиагностикаКлиентСервер.Утверждение(услугиДокумента <> Неопределено);

    Для Каждого строкаУслуг Из услугиДокумента Цикл
        выполнитьДвижениеПродажиОборот(строкаУслуг.Номенклатура, строкаУслуг.Сумма, строкаУслуг.Количество);
    КонецЦикла;
КонецПроцедуры

Процедура выполнитьВсеДвиженияМатериаловЗаказчикаДокумента()
    Если ЭтотОбъект.МатериалыЗаказчика.Количество() = 0 Тогда
        Возврат;
    КонецЕсли;

    Для Каждого строкаМатериалов Из ЭтотОбъект.МатериалыЗаказчика Цикл
        выполнитьДвижениеМатериалыЗаказчиковРасход(строкаМатериалов.Номенклатура, строкаМатериалов.Количество);
    КонецЦикла;
КонецПроцедуры

Процедура выполнитьДвижениеМатериалыЗаказчиковРасход(Знач номенклатураСсылка, Знач количество)
    движение = Движения.МатериалыЗаказчиков.ДобавитьРасход();
    движение.Период = ЭтотОбъект.Дата;
    движение.Склад = ЭтотОбъект.Склад;
    движение.Заказчик = ЭтотОбъект.Контрагент;
    движение.Номенклатура = номенклатураСсылка;
    движение.Количество = количество;
КонецПроцедуры

Процедура выполнитьДвижениеПродажиОборот(Знач номенклатура, Знач сумма, Знач количество)
    движение = Движения.Продажи.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.Номенклатура = номенклатура;
    движение.Сотрудник = ЭтотОбъект.Сотрудник;
    движение.Контрагент = ЭтотОбъект.Контрагент;
    движение.Количество = количество;
    движение.Сумма = сумма;
КонецПроцедуры

Функция выполнитьДвиженияТоваровПоПартиям(Знач строкаТоваров)
    общаяСтоимостьНоменклатуры = 0;
    несписанныйОстаток = строкаТоваров.КоличествоВДокументе;

    Для Каждого строкаПартииТоваров Из строкаТоваров.Строки Цикл
        // Выполняем проводку по регистру ТоварыНаСкладах для отдельной партии товаров (по сроку годности)
        результатСписания = выполнитьДвижениеТоварыНаСкладахРасход(
                строкаПартииТоваров,
                несписанныйОстаток);

        общаяСтоимостьНоменклатуры = общаяСтоимостьНоменклатуры + результатСписания.Сумма;
        несписанныйОстаток = несписанныйОстаток - результатСписания.Количество;

        Если несписанныйОстаток <= 0 Тогда
            ДиагностикаКлиентСервер.Утверждение(несписанныйОстаток = 0,
                    СтрШаблон("Несписанный остаток партии товара: ""%1"" не должен иметь отрицательное значение.",
                        строкаПартииТоваров.НоменклатураПредставление));
            Прервать;
        КонецЕсли;
    КонецЦикла;

    Возврат общаяСтоимостьНоменклатуры;
КонецФункции

// Параметры:
//  выборкаТоварыПоПартиям - Выборка - выборка товаров на складе с группировкой по сроку годности
//  текущийОстатокВДокументе - Число - Остаток количества Номенклатуры (Товаров) в документе
//  этоОтрицательныйОстаток - Булево - Указывает закончились ли товары на складе
// Возвращаемое значение:
//  - Структура - { Сумма: Число - Стоимость выполненного списания по партии Товаров, Количество: Число - Количество выполненного списания }
Функция выполнитьДвижениеТоварыНаСкладахРасход(выборкаТоварыПоПартиям,
        Знач текущийОстатокВДокументе, Знач этоОтрицательныйОстаток = Ложь)

    доступноДляСписания = ?(этоОтрицательныйОстаток, текущийОстатокВДокументе,
            Мин(выборкаТоварыПоПартиям.КоличествоОстаток, текущийОстатокВДокументе));

    движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
    движение.Период = Дата;
    движение.Номенклатура = выборкаТоварыПоПартиям.Номенклатура;
    движение.Склад = ЭтотОбъект.Склад;
    движение.СрокГодности = выборкаТоварыПоПартиям.СрокГодности;
    движение.Количество = доступноДляСписания;
    Если доступноДляСписания = выборкаТоварыПоПартиям.КоличествоОстаток ИЛИ этоОтрицательныйОстаток Тогда
        движение.Сумма = выборкаТоварыПоПартиям.СуммаОстаток;
    Иначе
        движение.Сумма = доступноДляСписания / выборкаТоварыПоПартиям.КоличествоОстаток
            * выборкаТоварыПоПартиям.СуммаОстаток;
    КонецЕсли;

    результатСписания = Новый Структура("Сумма, Количество", движение.Сумма, движение.Количество);

    Возврат результатСписания;
КонецФункции

Процедура выполнитьДвижениеУчетЗатратОборот(Знач статьяЗатрат, Знач сумма)
    движение = Движения.УчетЗатрат.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.СтатьяЗатрат = статьяЗатрат;
    движение.Сумма = сумма;
КонецПроцедуры

Процедура выполнитьДвижениеЗаказыКлиентовРасход()
    ожидаемыйТипДокумента = Тип("ДокументСсылка.ЗаказНаряд");
    ДиагностикаКлиентСервер.Утверждение(
        ЗначениеЗаполнено(ЭтотОбъект.ДокументОснование)
        И ТипЗнч(ЭтотОбъект.ДокументОснование) = ожидаемыйТипДокумента,
            СтрШаблон("ДокументОснование должен быть заполнен и иметь тип значения ""%1"".",
                Строка(ожидаемыйТипДокумента)));

    движение = Движения.ЗаказыКлиентов.Добавить();
    движение.ВидДвижения = ВидДвиженияНакопления.Расход;

    движение.Период = ЭтотОбъект.Дата;
    движение.Клиент = ЭтотОбъект.Контрагент;
    движение.ЗаказКлиента = ЭтотОбъект.ДокументОснование;
    движение.Сумма = ЭтотОбъект.Услуги.Итог("Сумма");
КонецПроцедуры
#КонецОбласти // Движения

#Область ЗаполнениеНаОсновании
Процедура заполнитьНаОснованииДокументаЗакаНаряд(Знач документСсылка)
    ДиагностикаКлиентСервер.Утверждение(ТипЗнч(документСсылка) = Тип("ДокументСсылка.ЗаказНаряд"));
    ДиагностикаКлиентСервер.Утверждение(ЗначениеЗаполнено(документСсылка),
        "Для заполнения на основании документ должен иметь не пустую ссылку.");

    ЭтотОбъект.ДокументОснование = документСсылка;
    ЭтотОбъект.Контрагент = документСсылка.Клиент;
    ЭтотОбъект.Автомобиль = документСсылка.Автомобиль;
    ЭтотОбъект.Сотрудник = документСсылка.Сотрудник;
    ЭтотОбъект.Комментарий = документСсылка.Комментарий;
    ЭтотОбъект.СуммаДокумента = документСсылка.СуммаДокумента;

    // Заполнение ТЧ Услуги
    ДиагностикаКлиентСервер.Утверждение(ЭтотОбъект.Услуги.Количество() = 0,
            "Таблица Услуги должна быть пустой");
    копироватьТЧ(ЭтотОбъект.Услуги, документСсылка.Услуги);

    // Заполнение ТЧ МатериалыЗаказчика
    ДиагностикаКлиентСервер.Утверждение(ЭтотОбъект.МатериалыЗаказчика.Количество() = 0,
            "Таблица МатериалыЗаказчика должна быть пустой");
    копироватьТЧ(ЭтотОбъект.МатериалыЗаказчика, документСсылка.МатериалыЗаказчика);

КонецПроцедуры

Процедура копироватьТЧ(Знач таблицаПриемник, Знач таблицаИсточник)
    Для Каждого строкаУслугИсточник Из таблицаИсточник Цикл
        новаяСтрокаУслуг = таблицаПриемник.Добавить();
        ЗаполнитьЗначенияСвойств(новаяСтрокаУслуг, строкаУслугИсточник);
    КонецЦикла;
КонецПроцедуры
#КонецОбласти // ЗаполнениеНаОсновании

#Область КонтрольОстатков
// Выполняет проверку достаточности остатков по Номенклатуре.
// В случае отсутствия достаточного количества остатков - оповещает Пользователя.
// Параметры:
//	количествоВДокументе - Число - Количество Номенклатуры в документе для движения
//	остаток - Число - Остаток Номенклатуры на складах
//	наименованиеНоменклатуры - Строка - Наименование Номенклатуры, используется в тексте сообщения
// Возвращаемое значение:
//	Булево - Истина если остатков нехватает, иначе Ложь
Функция проверитьПревышениеОстатков(Знач количествоВДокументе, Знач остаток, Знач наименованиеНоменклатуры)
    превышениеОстатковНоменклатуры = количествоВДокументе - остаток;
    Если превышениеОстатковНоменклатуры > 0 Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон("Превышение остатка по номенклатуре: ""%1"" в количестве: ""%2""",
                наименованиеНоменклатуры, превышениеОстатковНоменклатуры);
        сообщение.Сообщить();
        Возврат Истина;
    КонецЕсли;
    Возврат Ложь;
КонецФункции

// Параметры:
//	превышениеОстатков - Число - Количество превышения остатков
//	наименованиеНоменклатуры - Строка, Неопределено - Наименование Номенклатуры, используется в тексте сообщения
//	записьКлиентаПредставление - Строка, Неопределено - Строковое представление записи клиента
Процедура сообщитьПользователюОПревышенииОстатков(
        Знач превышениеОстатков, Знач наименованиеНоменклатуры = Неопределено, Знач записьКлиентаПредставление = Неопределено)
    ДиагностикаКлиентСервер.Утверждение(наименованиеНоменклатуры <> Неопределено
        ИЛИ записьКлиентаПредставление <> Неопределено,
        "Один из необязательных аргументов: [НаименованиеНоменклатуры, ЗаписьКлиентаПредставление] должен быть заполнен.");

    форматФинансовыхДанных = "ЧДЦ=2; ЧРГ= ; ЧН=0.00";
    сообщение = Новый СообщениеПользователю;
    текстСообщения = "";
    Если записьКлиентаПредставление <> Неопределено Тогда // Это превышение суммы по записи клиента
        текстСообщения = СтрШаблон("Превышена сумма по записи клиента ""%1"" на ""%2"".",
                записьКлиентаПредставление, Формат(превышениеОстатков, форматФинансовыхДанных));
    Иначе
        текстСообщения = СтрШаблон("Превышение остатка по номенклатуре: ""%1"" в количестве: ""%2""",
                наименованиеНоменклатуры, превышениеОстатков);
    КонецЕсли;

    сообщение.Текст = текстСообщения;
    сообщение.Сообщить();
КонецПроцедуры
#КонецОбласти // КонтрольОстатков

#Область ЗапросыДанных
// Получает выборку Номенклатуры текущего документа и остатки на складе по товарам
// Параметры:
//  менеджерТаблиц - МенеджерВременныхТаблиц
// Возвращаемое значение:
//  - ДеревоЗначений
//  - Неопределено
Функция получитьТоварыДокументаИОстатки(Знач менеджерТаблиц)
    ДиагностикаКлиентСервер.Утверждение(ТипЗнч(менеджерТаблиц) = Тип("МенеджерВременныхТаблиц"));

    менеджерТаблиц = Документы.Реализация.ПолучитьТоварыДокумента(ЭтотОбъект.Ссылка, , менеджерТаблиц);
    периодДокумента = Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Включая);
    Возврат Документы.Реализация.ПолучитьОстаткиИСтатьиЗатратДляВТ(менеджерТаблиц, периодДокумента, ЭтотОбъект.Склад, Истина);
КонецФункции

// Получает выборку Номенклатуры текущего документа на складе по услуги
// Возвращаемое значение:
//  - ТаблицаЗначений
Функция получитьУслугиДокумента()
    менеджерТаблиц = Документы.Реализация.ПолучитьУслугиДокумента(ЭтотОбъект.Ссылка, , Новый МенеджерВременныхТаблиц);

    запрос = Новый Запрос;
    запрос.МенеджерВременныхТаблиц = менеджерТаблиц;
    запрос.Текст =
        "ВЫБРАТЬ
        |	ВТ_УслугиДокумента.Номенклатура КАК Номенклатура,
        |	ВТ_УслугиДокумента.Номенклатура.СтатьяЗатрат КАК СтатьяЗатрат,
        |	ВТ_УслугиДокумента.Количество КАК Количество,
        |	ВТ_УслугиДокумента.Сумма КАК Сумма
        |ИЗ
        |   ВТ_УслугиДокумента КАК ВТ_УслугиДокумента
        |";

    результатЗапроса = запрос.Выполнить();
    Возврат результатЗапроса.Выгрузить();
КонецФункции

Функция получитьБлокировкуИзмененияТоварыНаСкладах()
    блокировка = Новый БлокировкаДанных;
    элементБлокировки = блокировка.Добавить("РегистрНакопления.ТоварыНаСкладах");
    элементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    элементБлокировки.ИсточникДанных = ЭтотОбъект.Товары;
    элементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");

    Если ЗначениеЗаполнено(ЭтотОбъект.Склад) Тогда
        элементБлокировки.УстановитьЗначение("Склад", ЭтотОбъект.Склад);
    КонецЕсли;

    Возврат блокировка;
КонецФункции
#КонецОбласти // ЗапросыДанных

#КонецОбласти // СлужебныеПроцедурыИФункции
