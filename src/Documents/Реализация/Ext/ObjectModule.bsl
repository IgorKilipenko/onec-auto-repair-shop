#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Знач данныеЗаполнения, __, ___)
    Если ЗначениеЗаполнено(ЭтотОбъект.АвторДокумента) = Ложь Тогда
        ЭтотОбъект.АвторДокумента = ПараметрыСеанса.ТекущийПользователь;
    КонецЕсли;

    Если ТипЗнч(данныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаряд") Тогда
        заполнитьНаОснованииДокументаЗакаНаряд(данныеЗаполнения);
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, __)
    результатДвижений = выполнитьВсеДвиженияДокумента();
    Если результатДвижений.Успех = Ложь Тогда
        Для Каждого сообщениеОбОшибке Из результатДвижений.СообщенияОбОшибках Цикл
            сообщение = Новый СообщениеПользователю;
            сообщение.Текст = сообщениеОбОшибке;
            сообщение.Сообщить();
        КонецЦикла;
        отказ = Истина;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область Движения
Функция выполнитьВсеДвиженияДокумента()
    результат = Новый Структура("Успех, СообщенияОбОшибках", Истина, Новый Массив);
    ЭтотОбъект.Движения.Записать();

    результатКонтроля = выполнитьВсеДвиженияПоСкладам();
    Если результатКонтроля.Успех = Ложь Тогда
        ДиагностикаКлиентСервер.Утверждение(результатКонтроля.СообщенияОбОшибках <> Неопределено);
        результат.Успех = Ложь;

        Для Каждого сообщениеОбОшибке Из результатКонтроля.СообщенияОбОшибках Цикл
            результат.СообщенияОбОшибках.Добавить(сообщениеОбОшибке);
        КонецЦикла;
    КонецЕсли;

    Возврат результат;
КонецФункции

Функция выполнитьВсеДвиженияПоСкладам()
    списокНоменклатуры = Новый Массив;
    Если получитьУчетнуюПолитику() = Перечисления.СпособыСписанияЗапасов.FEFO Тогда
        выполнитьВсеДвиженияПоСкладамFEFO();
    Иначе
        списокНоменклатуры = выполнитьВсеДвиженияПоСкладамПоСредней();
    КонецЕсли;

    ЭтотОбъект.Движения.ТоварыНаСкладах.Записать();
    ЭтотОбъект.Движения.ТоварыНаСкладах.БлокироватьДляИзменения = Истина;
    результатКонтроля = выполнитьКонтрольОстатковПоСкладам(списокНоменклатуры);

    Возврат результатКонтроля;
КонецФункции

Функция выполнитьВсеДвиженияПоСкладамПоСредней()
    результат = Новый Массив;
    товарыДокумента = Документы.Реализация.ПолучитьТоварыДокумента(ЭтотОбъект.Ссылка, Ложь, Истина);
    Если товарыДокумента = Неопределено Тогда
        ДиагностикаКлиентСервер.Утверждение(ЭтотОбъект.Товары.Количество() = 0,
                "Ожидается что ТЧ Товары должна быть пустой.");
        Возврат результат;
    КонецЕсли;

    Для Каждого текСтрокаТовар Из товарыДокумента Цикл
        выполнитьДвижениеТоварыНаСкладахРасход(ЭтотОбъект.Склад, текСтрокаТовар, текСтрокаТовар.Количество, Неопределено);
    КонецЦикла;

    результат = товарыДокумента.ВыгрузитьКолонку("Номенклатура");
    Возврат результат;
КонецФункции

// BSLLS:LatinAndCyrillicSymbolInWord-off
Функция выполнитьВсеДвиженияПоСкладамFEFO()
    результат = Новый Массив;
    товарыДокумента = Документы.Реализация.ПолучитьТоварыДокумента(ЭтотОбъект.Ссылка, Истина, Истина);
    Если товарыДокумента = Неопределено Тогда
        ДиагностикаКлиентСервер.Утверждение(ЭтотОбъект.Товары.Количество() = 0,
                "Ожидается что ТЧ Товары должна быть пустой.");
        Возврат результат;
    КонецЕсли;

    Для Каждого текСтрокаТовар Из товарыДокумента Цикл
        выполнитьДвижениеТоварыНаСкладахРасход(ЭтотОбъект.Склад, текСтрокаТовар, текСтрокаТовар.Количество, текСтрокаТовар.СрокГодности);
    КонецЦикла;

    результат = товарыДокумента.ВыгрузитьКолонку("Номенклатура");
    Возврат результат;
КонецФункции

Процедура выполнитьДвижениеТоварыНаСкладахРасход(Знач склад, Знач товар, Знач количество, Знач срокГодности = Неопределено)
    движение = ЭтотОбъект.Движения.ТоварыНаСкладах.ДобавитьРасход();
    движение.Период = ЭтотОбъект.Дата;
    движение.Номенклатура = товар.Номенклатура;
    движение.Склад = склад;
    движение.Количество = количество;
    движение.Сумма = товар.Сумма;
    Если срокГодности <> Неопределено Тогда
        движение.СрокГодности = срокГодности;
    КонецЕсли;
КонецПроцедуры

Функция выполнитьКонтрольОстатковПоСкладам(Знач списокНоменклатуры)
    результат = Новый Структура("Успех, СообщенияОбОшибках", Истина);

    моментВремениДокумента = Новый Граница(ЭтотОбъект.МоментВремени(), ВидГраницы.Включая);
    отрицательныеОстаткиПоНоменклатуре = РегистрыНакопления.ТоварыНаСкладах.ПолучитьОстаткиНоменклатуры(
            списокНоменклатуры, моментВремениДокумента, Новый Структура("Выгрузить,ТолькоОтрицательныеОстатки", Истина, Истина));

    Если отрицательныеОстаткиПоНоменклатуре <> Неопределено Тогда
        результат.Успех = Ложь;
        результат.СообщенияОбОшибках = Новый Массив;
        Для Каждого остатокНоменклатуры Из отрицательныеОстаткиПоНоменклатуре Цикл
            результат.СообщенияОбОшибках.Добавить(
                СтрШаблон("Номенклатура: ""%1"" - превышен остаток на складах в количестве: ""%2"".",
                    Строка(остатокНоменклатуры.Номенклатура), -остатокНоменклатуры.Количество));
        КонецЦикла;
    КонецЕсли;

    Возврат результат;
КонецФункции
#КонецОбласти // Движения

#Область ЗаполнениеНаОсновании
Процедура заполнитьНаОснованииДокументаЗакаНаряд(Знач документСсылка)
    ДиагностикаКлиентСервер.Утверждение(ТипЗнч(документСсылка) = Тип("ДокументСсылка.ЗаказНаряд"));
    ДиагностикаКлиентСервер.Утверждение(ЗначениеЗаполнено(документСсылка),
        "Для заполнения на основании документ должен иметь не пустую ссылку.");

    ЭтотОбъект.ДокументОснование = документСсылка;
    ЭтотОбъект.Контрагент = документСсылка.Клиент;
    ЭтотОбъект.Автомобиль = документСсылка.Автомобиль;
    ЭтотОбъект.Сотрудник = документСсылка.Сотрудник;
    ЭтотОбъект.Комментарий = документСсылка.Комментарий;
    ЭтотОбъект.СуммаДокумента = документСсылка.СуммаДокумента;

    // Заполнение ТЧ Услуги
    ДиагностикаКлиентСервер.Утверждение(ЭтотОбъект.Услуги.Количество() = 0,
            "Таблица Услуги должна быть пустой");
    копироватьТЧ(ЭтотОбъект.Услуги, документСсылка.Услуги);

    // Заполнение ТЧ МатериалыЗаказчика
    ДиагностикаКлиентСервер.Утверждение(ЭтотОбъект.МатериалыЗаказчика.Количество() = 0,
            "Таблица МатериалыЗаказчика должна быть пустой");
    копироватьТЧ(ЭтотОбъект.МатериалыЗаказчика, документСсылка.МатериалыЗаказчика);

КонецПроцедуры

Процедура копироватьТЧ(Знач таблицаПриемник, Знач таблицаИсточник)
    Для Каждого строкаУслугИсточник Из таблицаИсточник Цикл
        новаяСтрокаУслуг = таблицаПриемник.Добавить();
        ЗаполнитьЗначенияСвойств(новаяСтрокаУслуг, строкаУслугИсточник);
    КонецЦикла;
КонецПроцедуры
#КонецОбласти // ЗаполнениеНаОсновании

Функция получитьУчетнуюПолитику()
    Возврат РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(ЭтотОбъект.Дата).СпособУчетаЗапасов;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
