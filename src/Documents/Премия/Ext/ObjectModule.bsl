#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(_, __, ___)
    Если ЗначениеЗаполнено(ЭтотОбъект.АвторДокумента) = Ложь Тогда
        ЭтотОбъект.АвторДокумента = ПараметрыСеанса.ТекущийПользователь;
    КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(отказ, __)
    результатДвижений = выполнитьВсеДвиженияДокумента();
    Если результатДвижений.Успех = Ложь Тогда
        отказ = Истина;
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытий

#Область СлужебныеПроцедурыИФункции

#Область Движения
Функция выполнитьВсеДвиженияДокумента()
    результат = Новый Структура("Успех", Истина);

    результатПроверки = проверитьЗаполнениеСтатейЗатратДляВидовРасчета();
    Если результатПроверки.Успех = Ложь Тогда
        Для Каждого сообщение Из результатПроверки.СообщенияОбОшибках Цикл
            сообщение.Сообщить();
        КонецЦикла;

        результат.Успех = Ложь;
        Возврат результат;
    КонецЕсли;

    // Движения по регистру Начисления
    выполнитьВсеДвиженияНачислений();
    Движения.Начисления.Записывать = Истина;
    Движения.Начисления.Записать();
    Движения.Начисления.РассчитатьСуммуНачисления();

    // Движения по регистру УчетЗатрат
    Движения.УчетЗатрат.Записывать = Истина;
    данныеНачислений = РегистрыРасчета.Начисления.ПолучитьДанныеНачисленийДокументаРегистратора(ЭтотОбъект.Ссылка, Истина);
    Для Каждого статьяЗатратНачисления Из данныеНачислений.НачисленияПоСтатьямЗатрат Цикл
        выполнитьДвижениеУчетЗатратОборот(статьяЗатратНачисления.статьяЗатрат, статьяЗатратНачисления.Сумма);
    КонецЦикла;

    // Движения по регистру Хозрасчетный
    //Движения.Хозрасчетный.Записывать = Истина;
    //Для Каждого структураНачисления Из данныеНачислений.Начисления Цикл
    //    выполнитьДвижениеБУХозрасчетный(структураНачисления);
    //КонецЦикла;

    Возврат результат;
КонецФункции

Процедура выполнитьВсеДвиженияНачислений()
    Для Каждого строкаНачисления Из ЭтотОбъект.Начисления Цикл
        структураНачисления = РегистрыРасчета.Начисления.СоздатьПустуюСтруктуруНачисления();

        ЗаполнитьЗначенияСвойств(структураНачисления, строкаНачисления);
        структураНачисления.ДатаНачала = НачалоМесяца(ЭтотОбъект.ПериодНачисления);
        структураНачисления.ДатаОкончания = КонецМесяца(ЭтотОбъект.ПериодНачисления);

        РегистрыРасчета.Начисления.ЗаполнитьДвижениеНачисления(
            Движения.Начисления.Добавить(), ЭтотОбъект.ПериодНачисления, структураНачисления);
    КонецЦикла;
КонецПроцедуры

//Процедура выполнитьДвижениеБУХозрасчетный(Знач структураНачисления)
//    движение = РегистрыБухгалтерии.Хозрасчетный.ЗаполнитьДвижениеРасчетыСПерсоналом(
//            Движения.Хозрасчетный.Добавить(), ЭтотОбъект.Дата,
//            структураНачисления, "Отражено начисление премии сотрудникам");
//КонецПроцедуры

Процедура выполнитьДвижениеУчетЗатратОборот(Знач статьяЗатрат, Знач сумма)
    движение = Движения.УчетЗатрат.Добавить();
    движение.Период = ЭтотОбъект.Дата;
    движение.СтатьяЗатрат = статьяЗатрат;
    движение.Сумма = сумма;
КонецПроцедуры

Функция проверитьЗаполнениеСтатейЗатратДляВидовРасчета()
    результат = Новый Структура("Успех, СообщенияОбОшибках", Истина);

    списокВидовРасчета = ЭтотОбъект.Начисления.ВыгрузитьКолонку("ВидРасчета");
    Если списокВидовРасчета.Количество() = 0 Тогда
        Возврат результат;
    КонецЕсли;

    таблицаСтатейЗатрат = ПланыВидовРасчета.Начисления.ПолучитьСтатьиЗатратСпискаВидовРасчета(списокВидовРасчета);
    сообщенияОбОшибках = Новый Массив;
    Для Каждого строкаТаблицы Из таблицаСтатейЗатрат Цикл
        Если ЗначениеЗаполнено(строкаТаблицы.СтатьяЗатрат) = Ложь Тогда
            результат.Успех = Ложь;

            сообщение = Новый СообщениеПользователю;
            сообщение.Текст = СтрШаблон(
                    "Для вида расчета: ""%1"" не заполнена статья затрат.
                    |Для проведения документа - статьи затрат всех видов расчета начислений документа должны быть заполнены.",
                    Строка(строкаТаблицы.ВидРасчета));
            сообщенияОбОшибках.Добавить(сообщение);
        КонецЕсли;
    КонецЦикла;

    ДиагностикаКлиентСервер.Утверждение(результат.Успех = Истина ИЛИ сообщенияОбОшибках <> Неопределено);
    Если результат.Успех = Ложь Тогда
        результат.СообщенияОбОшибках = сообщенияОбОшибках;
    КонецЕсли;

    Возврат результат;
КонецФункции
#КонецОбласти // Движения

#КонецОбласти // СлужебныеПроцедурыИФункции
