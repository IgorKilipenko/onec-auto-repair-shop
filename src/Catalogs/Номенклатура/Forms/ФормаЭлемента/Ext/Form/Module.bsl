#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(_, __)
    инициализацияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(_)
    Если ЭтотОбъект.Объект.Ссылка.Пустая() Тогда
        заполнитьПоляЗначениямиПоУмолчанию();
    КонецЕсли;

    настроитьПараметрыПолейФормы();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипНоменклатурыПриИзменении(_)
    установитьРодителя();
    настроитьПараметрыПолейФормы();
КонецПроцедуры

&НаКлиенте
Процедура РодительПриИзменении(_)
    установитьТипНоменклатуры();
    настроитьПараметрыПолейФормы();
КонецПроцедуры

&НаКлиенте
Процедура СчетБухгалтерскогоУчетаНачалоВыбора(_, данныеВыбора, __, стандартнаяОбработка)
    стандартнаяОбработка = Ложь;

    списокДоступныхЗначений = Новый СписокЗначений;
    списокСчетовНоменклатуры = ЭтотОбъект._Состояние.КартаСчетовБУ.Получить(ЭтотОбъект.Объект.ТипНоменклатуры);

    Если списокСчетовНоменклатуры <> Неопределено Тогда
        ДиагностикаКлиентСервер.Утверждение(ПроверкаТиповКлиентСервер.ЭтоМассив(списокСчетовНоменклатуры, Истина));
        списокДоступныхЗначений.ЗагрузитьЗначения(списокСчетовНоменклатуры);
    КонецЕсли;

    данныеВыбора = списокДоступныхЗначений;
КонецПроцедуры

&НаКлиенте
Процедура СчетБухгалтерскогоУчетаПриИзменении(Знач элемент)
    Если ЗначениеЗаполнено(ЭтотОбъект.Объект.ТипНоменклатуры) = Ложь
        ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Объект.СчетБухгалтерскогоУчета) = Ложь Тогда
        Возврат;
    КонецЕсли;

    Если проверитьЭтоДопустимыйСчетБухучета(ЭтотОбъект.Объект.СчетБухгалтерскогоУчета, ЭтотОбъект.Объект.ТипНоменклатуры) = Ложь Тогда
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон("Недопустимый счет бухгалтерского учета.
                |Счет ""%1"" недопустим для номенклатуры с типом: ""%2"".",
                Строка(ЭтотОбъект.Объект.СчетБухгалтерскогоУчета),
                Строка(ЭтотОбъект.Объект.ТипНоменклатуры));
        сообщение.Поле = "СчетБухгалтерскогоУчета";
        сообщение.УстановитьДанные(ЭтотОбъект.Объект);
        сообщение.Сообщить();
    КонецЕсли;
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовШапкиФормы

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура установитьРодителя()
    Для Каждого элементКЗ Из ЭтотОбъект._Состояние.КартаГруппНоменклатур Цикл
        Если элементКЗ.Значение = ЭтотОбъект.Объект.ТипНоменклатуры Тогда
            ЭтотОбъект.Объект.Родитель = элементКЗ.Ключ;
            Прервать;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура установитьТипНоменклатуры()
    Если ЭтотОбъект.Объект.Родитель.Пустая() Тогда
        Возврат;
    КонецЕсли;

    типНоменклатурыДляГруппы = ЭтотОбъект._Состояние.КартаГруппНоменклатур.Получить(ЭтотОбъект.Объект.Родитель);
    ДиагностикаКлиентСервер.Утверждение(типНоменклатурыДляГруппы <> Неопределено,
        "Тип номенклатуры для группы должен быть определен.");

    ЭтотОбъект.Объект.ТипНоменклатуры = типНоменклатурыДляГруппы;
КонецПроцедуры

&НаКлиенте
Процедура настроитьПараметрыПолейФормы()
    // Настройка видимости полей
    ЭтотОбъект.Элементы.ДлительностьУслуги.Видимость =
        ЭтотОбъект.Объект.ТипНоменклатуры = ЭтотОбъект._Состояние.ТипыНоменклатуры.Услуга;
    ЭтотОбъект.Элементы.СчетБухгалтерскогоУчета.Видимость =
        ЭтотОбъект._Состояние.КартаСчетовБУ.Получить(ЭтотОбъект.Объект.ТипНоменклатуры) <> Неопределено;

    очиститьПолеСчетаБухучета(Ложь);
    настройкаОтображенияПредупрежденийДляНезаполненныхПолей();
КонецПроцедуры

&НаКлиенте
Функция получитьКонтекстДиагностики(Знач имяФункции = Неопределено)
    базовыйКонтекстДиагностики = "Номенклатура.ФормаЭлемента";
    Возврат ?(имяФункции = Неопределено, базовыйКонтекстДиагностики, СтрШаблон("%1.%2", базовыйКонтекстДиагностики, имяФункции));
КонецФункции

// Настроика включения/отключения отметки незаполненного для опциональных полей
&НаКлиенте
Процедура настройкаОтображенияПредупрежденийДляНезаполненныхПолей()
    Если ЗначениеЗаполнено(ЭтотОбъект.Объект.ТипНоменклатуры)
        И ЭтотОбъект.Объект.ТипНоменклатуры <> ЭтотОбъект._Состояние.ТипыНоменклатуры.МатериалКлиента Тогда
        ЭтотОбъект.Элементы.СтатьяЗатрат.АвтоОтметкаНезаполненного = Истина;
    Иначе
        ЭтотОбъект.Элементы.СтатьяЗатрат.АвтоОтметкаНезаполненного = Ложь;
    КонецЕсли;

    Если ЗначениеЗаполнено(ЭтотОбъект.Объект.ТипНоменклатуры) Тогда
        Если ЭтотОбъект.Объект.ТипНоменклатуры <> ЭтотОбъект._Состояние.ТипыНоменклатуры.МатериалКлиента Тогда
            ЭтотОбъект.Элементы.СтатьяЗатрат.АвтоОтметкаНезаполненного = Истина;
            ЭтотОбъект.Элементы.СчетБухгалтерскогоУчета.АвтоОтметкаНезаполненного = Истина;
        Иначе
            ЭтотОбъект.Элементы.СтатьяЗатрат.АвтоОтметкаНезаполненного = Ложь;
            ЭтотОбъект.Элементы.СчетБухгалтерскогоУчета.АвтоОтметкаНезаполненного = Ложь;
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура заполнитьПоляЗначениямиПоУмолчанию()
    // Родитель по умолчанию - Товары
    ЭтотОбъект.Объект.Родитель = ?(ЗначениеЗаполнено(ЭтотОбъект.Объект.Родитель),
            ЭтотОбъект.Объект.Родитель,
            ЭтотОбъект._Состояние.ГруппыНоменклатуры.Товары);

    // Счет бухгалтерского учета по умолчанию - Хозрасчетный.Товары
    ЭтотОбъект.Объект.СчетБухгалтерскогоУчета = ?(ЗначениеЗаполнено(ЭтотОбъект.Объект.СчетБухгалтерскогоУчета),
            ЭтотОбъект.Объект.СчетБухгалтерскогоУчета,
            ЭтотОбъект._Состояние.СчетаБУ.Товары);
КонецПроцедуры

// Выполняет очистку поля `СчетБухгалтерскогоУчета`. Значение аргумента `типНоменклатуры` служит условием очистки.
// Параметры:
//  принудительно - Булево - Если Истина очистка выполнится безусловно, иначе очистка выполнится только в случае если
//      текущее значение поля `СчетБухгалтерскогоУчета` не соответствует типу номенклатуры
&НаКлиенте
Процедура очиститьПолеСчетаБухучета(Знач принудительно = Ложь)
    Если принудительно Тогда
        ЭтотОбъект.Объект.СчетБухгалтерскогоУчета = Неопределено;
        Возврат;
    КонецЕсли;
    
    Если ЗначениеЗаполнено(ЭтотОбъект.Объект.СчетБухгалтерскогоУчета) = Ложь
        ИЛИ ЗначениеЗаполнено(ЭтотОбъект.Объект.ТипНоменклатуры) = Ложь Тогда
        Возврат;
    КонецЕсли;

    Если проверитьЭтоДопустимыйСчетБухучета(ЭтотОбъект.Объект.СчетБухгалтерскогоУчета, ЭтотОбъект.Объект.ТипНоменклатуры) = Ложь Тогда
        ЭтотОбъект.Объект.СчетБухгалтерскогоУчета = Неопределено;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция проверитьЭтоДопустимыйСчетБухучета(Знач счетБУ, Знач типНоменклатуры)
    допустимыеСчетаБУ = ЭтотОбъект._Состояние.КартаСчетовБУ.Получить(типНоменклатуры);

    индексСчета = ?(ПроверкаТиповКлиентСервер.ЭтоМассив(допустимыеСчетаБУ),
            допустимыеСчетаБУ.Найти(счетБУ), Неопределено);

    Возврат индексСчета <> Неопределено;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции

#Область Инициализация

&НаСервере
Процедура инициализацияНаСервере()
    ЭтотОбъект._Состояние = Новый Структура;
    ЭтотОбъект._Состояние.Вставить("ГруппыНоменклатуры",
        РаботаСМетаданными.ПолучитьЗначенияПредопределенных(Тип("СправочникСсылка.Номенклатура")));
    ЭтотОбъект._Состояние.Вставить("ТипыНоменклатуры", Справочники.Номенклатура.ПолучитьТипыНоменклатуры());
    ЭтотОбъект._Состояние.Вставить("СчетаБУ", ПланыСчетов.Хозрасчетный.ПолучитьЗначенияПланаСчетов());
    ЭтотОбъект._Состояние.Вставить("КартаГруппНоменклатур", Справочники.Номенклатура.ПолучитьКартуГруппВТипыНоменклатуры());
    ЭтотОбъект._Состояние.Вставить("КартаСчетовБУ", Справочники.Номенклатура.ПолучитьКартуПланыСчетовДляТиповНоменклатуры());
КонецПроцедуры

#КонецОбласти // Инициализация
