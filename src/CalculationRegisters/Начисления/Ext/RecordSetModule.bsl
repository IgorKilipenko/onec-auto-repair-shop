#Область ПрограммныйИнтерфейс

// Расчет суммы начислений по набору записей регистра
// Возвращаемое значение:
//  - Булево - Истина, если результат начислений изменился после выполнения расчетов
Функция РассчитатьСуммуНачисления() Экспорт
    состояниеРасчетов =
        Новый Структура("ОстаткиДнейБолезниЗаСчетРаботодателя, ЗначенияМодифицированы", Новый Соответствие, Ложь);

    Для Каждого движение Из ЭтотОбъект Цикл
        результатРасчета = получитьСуммуНачисления(движение, состояниеРасчетов);

        Если результатРасчета.Успех Тогда
            Если НЕ состояниеРасчетов.ЗначенияМодифицированы И движение.Сумма <> результатРасчета.Сумма Тогда
                состояниеРасчетов.ЗначенияМодифицированы = Истина;
            КонецЕсли;

            движение.Сумма = результатРасчета.Сумма;

        Иначе
            ДиагностикаКлиентСервер.Утверждение(
                ТипЗнч(результатРасчета.Сообщение) = Тип("Строка")
                    И ЗначениеЗаполнено(результатРасчета.Сообщение),
                    "Текст сообщения об ошибке должен быть заполнен.");

            сообщение = Новый СообщениеПользователю;
            сообщение.Текст = результатРасчета.Сообщение;
            сообщение.Сообщить();
        КонецЕсли;
    КонецЦикла;

    Если состояниеРасчетов.ЗначенияМодифицированы Тогда
        ЭтотОбъект.Записать( , Истина);
    КонецЕсли;

    Возврат состояниеРасчетов.ЗначенияМодифицированы;
КонецФункции

// Добавляет новую запись в набор записей `РегистрыРасчетов.Начисления`
// Параметры:
//  периодНачисления - Дата
//  структураНачисления - Структура, ФиксированнаяСтруктура
//      * ВидРасчета - ПланВидовРасчетаСсылка.Начисления
//      * ДатаНачала - Дата
//      * ДатаОкончания - Дата
//      * Сотрудник - СправочникСсылка.Сотрудник
//      * ПоказательРасчета - Число
//      * График - СправочникСсылка.График
//      * Сумма - Число, Неопределено
// Возвращаемое значение:
//  - Движение
Функция ДобавитьНачисление(Знач периодНачисления, Знач структураНачисления) Экспорт
    новаяЗапись = ЭтотОбъект.Добавить();
    новаяЗапись.Сторно = Ложь;
    новаяЗапись.ПериодРегистрации = периодНачисления;

    новаяЗапись.ВидРасчета = структураНачисления.ВидРасчета;
    новаяЗапись.ПериодДействияНачало = структураНачисления.ДатаНачала;
    новаяЗапись.ПериодДействияКонец = структураНачисления.ДатаОкончания;
    новаяЗапись.БазовыйПериодНачало = структураНачисления.ДатаНачала;
    новаяЗапись.БазовыйПериодКонец = структураНачисления.ДатаОкончания;
    новаяЗапись.Сотрудник = структураНачисления.Сотрудник;
    новаяЗапись.ПоказательРасчета = структураНачисления.ПоказательРасчета;
    новаяЗапись.График = структураНачисления.ГрафикРаботы;

    структураНачисления.Свойство("Сумма", новаяЗапись.Сумма);
    новаяЗапись.Сумма = ?(новаяЗапись.Сумма = Неопределено, 0, новаяЗапись.Сумма);

    Возврат новаяЗапись;
КонецФункции

#КонецОбласти // ПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

Функция получитьСуммуНачисления(Знач движение, Знач состояниеРасчетов)
    результатРасчета = Новый Структура("Сумма, Успех, Сообщение", 0, Истина, Неопределено);

    Если движение.ВидРасчета = ПланыВидовРасчета.Начисления.Оклад Тогда
        результатРасчета.Сумма = рассчитатьСуммуНачисленияОклад(движение);

    ИначеЕсли движение.ВидРасчета = ПланыВидовРасчета.Начисления.Больничный Тогда
        // Определяем ткущий остаток дней больничного оплачиваемых за счет работодателя для сотрудника на начало расчета
        остатокДнейБолезниЗаСчетРаботодателя = состояниеРасчетов.ОстаткиДнейБолезниЗаСчетРаботодателя[движение.Сотрудник];
        // В случае отсутствия записи в состоянии по текущему сотруднику - обновляем состояние значением по умолчанию
        Если остатокДнейБолезниЗаСчетРаботодателя = Неопределено Тогда
            остатокДнейБолезниЗаСчетРаботодателя = получитьКоличествоДнейБольничногоЗаСчетРаботодателя();
            состояниеРасчетов.ОстаткиДнейБолезниЗаСчетРаботодателя.Вставить(
                движение.Сотрудник, остатокДнейБолезниЗаСчетРаботодателя);
        КонецЕсли;

        // Выполнение расчетов
        результатРасчетаПоБолезни = рассчитатьСуммуНачисленияПоБолезни(
                движение.ПериодДействияНачало, движение.ПериодДействияКонец,
                движение.ПоказательРасчета, остатокДнейБолезниЗаСчетРаботодателя);
        результатРасчета.Сумма = результатРасчетаПоБолезни.Сумма;

        // Обновление состояние расчетов
        состояниеРасчетов.ОстаткиДнейБолезниЗаСчетРаботодателя[движение.Сотрудник] =
            результатРасчетаПоБолезни.ОстатокДнейБолезниЗаСчетРаботодателя;

    ИначеЕсли движение.ВидРасчета.Предопределенный = Ложь Тогда
        результатРасчетаНеПредопределенных = рассчитатьСуммуНачисленияНеПредопределенных(движение.ВидРасчета.ФормулаРасчета, движение);

        Если результатРасчетаНеПредопределенных.Успех Тогда
            результатРасчета.Сумма = результатРасчетаНеПредопределенных.Сумма;
        Иначе
            результатРасчета.Успех = Ложь;
            результатРасчета.Сообщение = результатРасчетаНеПредопределенных.Сообщение;
        КонецЕсли;

    Иначе
        результатРасчета.Успех = Ложь;
        результатРасчета.Сообщение = СтрШаблон("Для вида расчета %1 не задана формула расчета!", движение.ВидРасчета);
    КонецЕсли;

    Возврат результатРасчета;
КонецФункции

Функция рассчитатьСуммуНачисленияОклад(Знач движение)
    оклад = движение.ПоказательРасчета;
    отработаноЧасов = движение.ПолучитьДанныеГрафика(ВидПериодаРегистраРасчета.ФактическийПериодДействия).Итог("КоличествоЧасов");
    нормаЧасов = движение.ПолучитьДанныеГрафика(ВидПериодаРегистраРасчета.ПериодДействия).Итог("КоличествоЧасов");

    Возврат оклад * отработаноЧасов / нормаЧасов;
КонецФункции

Функция рассчитатьСуммуНачисленияПоБолезни(Знач датаНачала, Знач датаОкончания,
        Знач оклад, Знач остатокДнейБолезниЗаСчетРаботодателя)

    результат = Новый Структура("Сумма, ОстатокДнейБолезниЗаСчетРаботодателя", 0, остатокДнейБолезниЗаСчетРаботодателя);

    стоимостьДняПоБолезни = рассчитатьСтоимостьДняПоБолезни(оклад);
    количествоДнейБолезни = рассчитатьКоличествоДнейБолезни(датаНачала, датаОкончания);

    Если количествоДнейБолезни <= остатокДнейБолезниЗаСчетРаботодателя Тогда
        результат.Сумма = количествоДнейБолезни * стоимостьДняПоБолезни;
        результат.ОстатокДнейБолезниЗаСчетРаботодателя = результат.ОстатокДнейБолезниЗаСчетРаботодателя - количествоДнейБолезни;
    Иначе
        результат.Сумма = результат.ОстатокДнейБолезниЗаСчетРаботодателя * стоимостьДняПоБолезни;
        результат.ОстатокДнейБолезниЗаСчетРаботодателя = 0;
    КонецЕсли;

    Возврат результат;
КонецФункции

Функция рассчитатьСуммуНачисленияНеПредопределенных(Знач формулаРасчета, Знач движение)
    результатРасчета = Новый Структура("Сумма, Успех, Сообщение", 0, Истина, Неопределено);

    Попытка
        результатРасчета.Сумма = выполнитьРасчетВБезопасномРежиме(формулаРасчета, движение);
    Исключение
        результатРасчета.Успех = Ложь;
    КонецПопытки;

    Если НЕ результатРасчета.Успех ИЛИ результатРасчета.Сумма = Неопределено Тогда
        результатРасчета.Сообщение = СтрШаблон(
                "Ошибка выполнения формулы расчета.
                |%1", ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

        результатРасчета.Сумма = 0;
    КонецЕсли;

    Возврат результатРасчета;
КонецФункции

Функция получитьКоличествоДнейБольничногоЗаСчетРаботодателя()
    Возврат 3;
КонецФункции

Функция рассчитатьКоличествоДнейБолезни(Знач датаНачала, Знач датаОкончания)
    Возврат (КонецДня(датаОкончания) + 1 - датаНачала) / получитьКоличествоСекундВСутках();
КонецФункции

Функция рассчитатьСтоимостьДняПоБолезни(Знач оклад)
    Возврат оклад * 24 / 730;
КонецФункции

Функция получитьКоличествоСекундВСутках()
    Возврат 24 * 3600;
КонецФункции

Функция выполнитьРасчетВБезопасномРежиме(Знач алгоритм, Знач движение, Знач имяВыходногоПараметра = "РезультатРасчета")
    ДиагностикаКлиентСервер.Утверждение(имяВыходногоПараметра = Неопределено
            ИЛИ (ТипЗнч(имяВыходногоПараметра) = Тип("Строка")
                И ЗначениеЗаполнено(имяВыходногоПараметра)),
            "Аргумент ""ИмяВыходногоПараметра"" имеет недопустимое значение.");

    __результатВыполнения__ = Неопределено;

    Если имяВыходногоПараметра <> Неопределено Тогда
        алгоритм = СтрЗаменить(алгоритм, имяВыходногоПараметра, "__результатВыполнения__");
    КонецЕсли;

    УстановитьБезопасныйРежим(Истина);
    // BSLLS:ExecuteExternalCode-off
    Выполнить(алгоритм);

    Возврат __результатВыполнения__;
КонецФункции

#КонецОбласти // СлужебныеПроцедурыИФункции
