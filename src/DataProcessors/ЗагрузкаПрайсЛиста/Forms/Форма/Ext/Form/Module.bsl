#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(_, __)
    ЭтотОбъект._Состояние = Новый Структура;
    ЭтотОбъект._Состояние.Вставить("ПрайсЛистЗаполнен", Ложь);

    ЭтотОбъект.Объект.ДатаПрайсЛиста = ТекущаяДатаСеанса();
    ЭтотОбъект.Объект.ВидЦеныПродажи = Перечисления.ВидыЦенПродажи.Розничная;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(_)
    обновитьСостояниеФормы();
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиКомандФормы

// Выполняет загрузку прайс-листа из файла табличных данных
// Параметры:
//  _ - Неопределено - [Команда] - Не используется
&НаКлиенте
Асинх Процедура ЗагрузитьПрайсЛист(_)
    результат = Ждать вывестиПрайсЛист();
    ЭтотОбъект._Состояние.ПрайсЛистЗаполнен = результат ИЛИ Объект.ПрайсЛист.ВысотаТаблицы > 0;
    обновитьСостояниеФормы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЦены(_)
    результатВыполнения = записатьЦеныПродажНаСервере();

    сообщение = Новый СообщениеПользователю;
    сообщение.Текст = результатВыполнения.Сообщение;
    сообщение.Сообщить();
КонецПроцедуры

#КонецОбласти // ОбработчикиКомандФормы

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция записатьЦеныПродажНаСервере()
    результат = Новый Структура("Успех, Сообщение", Истина);

    таблицаЦенНоменклатуры = Обработки.ЗагрузкаПрайсЛиста.ПолучитьТаблицуЗначенийИзТабличногоДокумента(
            ЭтотОбъект.Объект.ПрайсЛист);
    Если таблицаЦенНоменклатуры.Количество() = 0 Тогда
        результат.Сообщение = "В прайс листе отсутствуют данные для заполнения.";
    КонецЕсли;

    таблицаЦенНоменклатуры.Свернуть("Артикул, Цена");
    количествоИсходных = таблицаЦенНоменклатуры.Количество();

    запрос = Новый Запрос;
    запрос.Текст =
        "ВЫБРАТЬ
        |	ПрайсЛист.Артикул КАК Код,
        |	ПрайсЛист.Цена КАК Цена
        |ПОМЕСТИТЬ ВТ_ПрайсЛист
        |ИЗ
        |	&ТаблицаЦенНоменклатуры КАК ПрайсЛист
        |ГДЕ
        |	ПрайсЛист.Артикул ЕСТЬ НЕ NULL
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |	ТаблНоменклатура.Ссылка КАК Номенклатура,
        |	ВТ_ПрайсЛист.Цена КАК Цена
        |ИЗ
        |	ВТ_ПрайсЛист КАК ВТ_ПрайсЛист
        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК ТаблНоменклатура
        |		ПО ВТ_ПрайсЛист.Код = ТаблНоменклатура.Код
        |";

    запрос.УстановитьПараметр("ТаблицаЦенНоменклатуры", таблицаЦенНоменклатуры);
    результатЗапроса = запрос.Выполнить();
    результат.Сообщение = "Записано ""%1"" строк цен номенклатуры.";
    Если результатЗапроса.Пустой() Тогда
        результат.Сообщение = СтрШаблон(результат.Сообщение, 0);
        Возврат результат;
    КонецЕсли;

    таблицаЦенНоменклатуры = результатЗапроса.Выгрузить();
    РегистрыСведений.ЦеныНоменклатуры.ЗаполнитьИзТаблицы(
        ЭтотОбъект.Объект.ДатаПрайсЛиста, таблицаЦенНоменклатуры, ЭтотОбъект.Объект.ВидЦеныПродажи);

    результат.Сообщение = СтрШаблон(результат.Сообщение, таблицаЦенНоменклатуры.Количество());
    Возврат результат;
КонецФункции

// Заполняет табличный документ из файла в реквизит формы ПрайсЛист
// Возвращаемое значение:
//  - Булево
&НаКлиенте
Асинх Функция вывестиПрайсЛист()
    файлТабличныхДанных = Ждать загрузитьТабличныйФайлДанных();
    Если файлТабличныхДанных = Неопределено Тогда
        Возврат Ложь; // Файл не выбран
    КонецЕсли;

    Попытка
        вывестиПрайсЛистФормыНаСервере(
            файлТабличныхДанных.ИмяВременногоФайла,
            файлТабличныхДанных.ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя);
    Исключение
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон(
                "Ошибка чтения фала прайс-листа: ""%1"".
                |Описание ошибки: %2",
                файлТабличныхДанных.ОписаниеПомещенногоФайла.СсылкаНаФайл.Имя,
                ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        сообщение.Сообщить();

        таблДок = Неопределено;
    КонецПопытки;

    Возврат Истина;
КонецФункции

// Заполняет табличный документ из файла в реквизит формы ПрайсЛист
// Параметры:
//  имяВременногоФайла - Строка
//  имяИсходногоФайла - Строка
//  удалитьФайл - Булево - Если Истина - исходный файл будет удален после чтения
// Возвращаемое значение:
//  - Булево
&НаСервере
Функция вывестиПрайсЛистФормыНаСервере(Знач имяВременногоФайла, Знач имяИсходногоФайла, Знач удалитьФайл = Истина)
    таблДок = Неопределено;
    ЭтотОбъект.Объект.ПрайсЛист.Очистить();

    Попытка
        таблДок = получитьТабличныйДокументИзФайлаНаСервере(имяВременногоФайла);

    Исключение
        сообщение = Новый СообщениеПользователю;
        сообщение.Текст = СтрШаблон(
                "Ошибка чтения фала прайс-листа: ""%1"".
                |Описание ошибки: %2",
                имяИсходногоФайла,
                ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
        сообщение.Сообщить();

        таблДок = Неопределено;
    КонецПопытки;

    Если удалитьФайл Тогда
        удалитьФайлИзВременногоХранилищаНаСервере(имяВременногоФайла);
    КонецЕсли;

    Если таблДок = Неопределено Тогда
        Возврат Ложь;
    КонецЕсли;

    ЭтотОбъект.Объект.ПрайсЛист.Вывести(таблДок);

    Возврат Истина;
КонецФункции

// Открывает диалоговое окно выбора файла на клиенте.
// Выбранный файл помещается во временное хранилище на сервере
&НаКлиенте
Асинх Функция загрузитьТабличныйФайлДанных()
    параметрыВыбораФайла = Новый ПараметрыДиалогаПомещенияФайлов(
            "Выбор файла прайс-листа", Ложь, "Файл данных (*.xls, *.xlsx, *.ods)|*.xls;*.xlsx;*.ods");
    описаниеФайлаДанных = Ждать ПоместитьФайлНаСерверАсинх( , , , параметрыВыбораФайла, ЭтотОбъект.УникальныйИдентификатор);

    Если описаниеФайлаДанных = Неопределено Тогда
        Возврат Неопределено; // Файл не выбран
    КонецЕсли;

    ДиагностикаКлиентСервер.Утверждение(описаниеФайлаДанных.ПомещениеФайлаОтменено = Ложь
            И описаниеФайлаДанных.Адрес <> Неопределено,
            "Файл должен быть помещен в хранилище.");

    имяФайлаДанных = Ждать поместитьФайлВоВременноеХранилищеНаСервере(
            описаниеФайлаДанных.Адрес, описаниеФайлаДанных.СсылкаНаФайл.Расширение);

    Возврат Новый Структура("ИмяВременногоФайла, ОписаниеПомещенногоФайла", имяФайлаДанных, описаниеФайлаДанных);
КонецФункции

// Получает ТабличныйДокумент из файла помещенного во временное хранилище на сервере
// Параметры:
//  имяФайлаДанных - Строка
// Возвращаемое значение:
//  - ТабличныйДокумент
&НаСервереБезКонтекста
Функция получитьТабличныйДокументИзФайлаНаСервере(Знач имяФайлаДанных)
    результат = Новый ТабличныйДокумент;
    результат.Прочитать(имяФайлаДанных);

    Возврат результат;
КонецФункции

// Записывает файл из окружения клиента во временное хранилище на сервере
// Параметры:
//  адрес - Строка - Адрес файла в окружении клиента для получения потока двоичных данных
//  расширение - Строка - Расширение помещаемого файла (прим.: .xls)
// Возвращаемое значение:
//  - Строка
&НаСервереБезКонтекста
Функция поместитьФайлВоВременноеХранилищеНаСервере(Знач адрес, Знач расширение)
    // BSLLS:MissingTemporaryFileDeletion-off
    имяФайлаДанных = ПолучитьИмяВременногоФайла(расширение);
    потокДанных = ПолучитьИзВременногоХранилища(адрес);

    ДиагностикаКлиентСервер.Утверждение(ТипЗнч(потокДанных) = Тип("ДвоичныеДанные"),
            "Данные полученные из временного хранилища должны быть типа: ""ДвоичныеДанные""");

    потокДанных.Записать(имяФайлаДанных);

    Возврат имяФайлаДанных;
КонецФункции

// Удаляет файл из временного хранилища окружения сервера
// Параметры:
//  путьФайлаДанных - Строка - Путь к файлу
// Возвращаемое значение:
//  - Булево
&НаСервереБезКонтекста
Функция удалитьФайлИзВременногоХранилищаНаСервере(Знач путьФайлаДанных)
    Попытка
        УдалитьФайлы(путьФайлаДанных);
    Исключение
        записьОбОшибкеВЖурналРегистрацииНаСервере("ПолучитьТабличныйДокументИзФайла",
            ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

        Возврат Ложь;
    КонецПопытки;

    Возврат Истина;
КонецФункции

// Выполняет запись информации о событии в журнал регистрации сервера
// Параметры:
//  имяСобытия - Строка - Наименование события
//  комментарий - Строка
&НаСервереБезКонтекста
Процедура записьОбОшибкеВЖурналРегистрацииНаСервере(Знач имяСобытия, Знач комментарий)
    ЗаписьЖурналаРегистрации(СтрШаблон("ЗагрузкаПрайсЛиста.%1", имяСобытия), УровеньЖурналаРегистрации.Ошибка, , ,
        ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
КонецПроцедуры

// Выполняет обновление состояний отображения элементов формы
&НаКлиенте
Процедура обновитьСостояниеФормы()
    ЭтотОбъект.Элементы.ПрайсЛист.Доступность = ЭтотОбъект._Состояние.ПрайсЛистЗаполнен;
    ЭтотОбъект.Элементы.ПоместитьВДокумент.Видимость = ЭтотОбъект._Состояние.ПрайсЛистЗаполнен;
    ЭтотОбъект.Элементы.ПоместитьВДокумент.Доступность = ЭтотОбъект._Состояние.ПрайсЛистЗаполнен;
КонецПроцедуры

#КонецОбласти // СлужебныеПроцедурыИФункции
